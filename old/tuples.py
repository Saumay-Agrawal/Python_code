# '''Working with Tuples.'''
#
# tuple1 = 'a', 'b', 'c', 'd', 'e'
# tuple2 = ('a', 'b', 'c', 'd', 'e')
# # tuple(iterable)
# t = tuple('abc')
# t2 = tuple([1, 2, 3])
# t3 = tuple()
# print(tuple1)
# print(tuple2)
#
# tuple3 = ('a',)
# tuple4 = ('a')
# print(type(tuple3))
# print(type(tuple4))
#
# print(tuple1[0])
# print(tuple1[1:3])
#
# #TypeError: object doesn't support item assignment
# #tuple1[0] = 'A'
#
# tuple1 = ('A',) + tuple1[1:]
# print(tuple1)
#
# #Tuple assignment
# a, b = 1, 2
# a, b = b, a
# a, b, c, d = 1, 2, 3
#
# #Tuple as a return value
# def swap(x, y):
#     return y, x
# a, b = swap(a, b)
#
# #This function doesn't work due to aliasing. Use a state diagram for this.
# def swap(x, y):
#     x, y = y, x
# swap(a, b)
'''1.Tuples are immutable.\n2. Tuples have no methods.\n3. Tuples are faster \
than lists(constant set of values, no changes).\n4. Can be used as dictionary \
keys.\n5. Tuples freeze lists and lists thaw tuples.'''
#
# #Deterministic - programs do exactly what they are coded.
#
# #Generating random numbers
# import random
# for i in range(10):
#     x=random.random() #generates a pseudorandom floating point number b/w 0.0 and 1.0
#     print(x)
#
# #Generating numbers b/w two points(incl.)
# import random
# low = 100
# high = 1000
# mul_factor = high - low
# for i in range(10):
#     x = mul_factor * random.random()
#     print(low + x)

#List of random numbers
import random
def randomList(n):
    s = [0] * n
    for i in range(n):
        s[i] = random.random()
    return s
print(randomList(8))
#The numbers generated by random() are supposed to be distributed uniformly.
def inBucket(t, low, high):
    count = 0
    for i in t:
        if low < i < high:
            count += 1
    return count
